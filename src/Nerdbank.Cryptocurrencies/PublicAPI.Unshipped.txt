#nullable enable
const Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.HardenedBit = 2147483648 -> uint
Nerdbank.Cryptocurrencies.Base58Check
Nerdbank.Cryptocurrencies.Bech32
Nerdbank.Cryptocurrencies.Bech32.Decode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data) -> (int TagLength, int DataLength)
Nerdbank.Cryptocurrencies.Bech32.Encode(System.ReadOnlySpan<char> tag, System.ReadOnlySpan<byte> data, System.Span<char> output) -> int
Nerdbank.Cryptocurrencies.Bech32.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out (int Tag, int Data) length) -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Index.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Index.init -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.IsHardened.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.KeyPath(uint Index, Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? Parent = null) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parent.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parent.init -> void
Nerdbank.Cryptocurrencies.Bip39Mnemonic
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Bip39Mnemonic(System.ReadOnlySpan<byte> entropy, System.ReadOnlyMemory<char> password = default(System.ReadOnlyMemory<char>)) -> void
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Entropy.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Password.get -> System.ReadOnlyMemory<char>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Seed.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.SeedPhrase.get -> string!
Nerdbank.Cryptocurrencies.Blake2B
Nerdbank.Cryptocurrencies.Blake2B.Blake2B() -> void
Nerdbank.Cryptocurrencies.Blake2B.Blake2B(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Config
Nerdbank.Cryptocurrencies.Blake2B.Config.Config() -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Finish(System.Span<byte> finalHash) -> int
Nerdbank.Cryptocurrencies.Blake2B.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Reset() -> void
Nerdbank.Cryptocurrencies.Blake2B.Reset(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Update(System.ReadOnlySpan<byte> data) -> void
Nerdbank.Cryptocurrencies.CompactSize
Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadPadding = 4 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadWordCount = 6 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BufferTooSmall = 2 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidCharacter = 0 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidChecksum = 1 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidWord = 5 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.NoSeparator = 3 -> Nerdbank.Cryptocurrencies.DecodeError
override Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.ToString() -> string!
static Nerdbank.Cryptocurrencies.Base58Check.Decode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes) -> int
static Nerdbank.Cryptocurrencies.Base58Check.Encode(System.ReadOnlySpan<byte> payload, System.Span<char> chars) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxDecodedLength(int charCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxEncodedLength(int byteCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out int bytesWritten) -> bool
static Nerdbank.Cryptocurrencies.Bech32.GetDecodedLength(System.ReadOnlySpan<char> encoded) -> (int Tag, int Data)?
static Nerdbank.Cryptocurrencies.Bech32.GetEncodedLength(int tagLength, int dataLength) -> int
static Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parse(System.ReadOnlySpan<char> path) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.TryParse(System.ReadOnlySpan<char> path, out Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? result) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits, System.ReadOnlyMemory<char> password = default(System.ReadOnlyMemory<char>)) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash, in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Decode(System.ReadOnlySpan<byte> buffer, out ulong value) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Encode(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.CompactSize.GetEncodedLength(ulong value) -> int
static readonly Nerdbank.Cryptocurrencies.Bech32.Bech32m -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bech32.Original -> Nerdbank.Cryptocurrencies.Bech32!
